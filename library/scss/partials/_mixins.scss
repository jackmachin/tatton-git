/******************************************************************
Site Name:
Author:

Stylesheet: Mixins Stylesheet

This is where you can take advantage of Sass' great features: Mixins.
I won't go in-depth on how they work exactly,
there are a few articles below that will help do that. What I will
tell you is that this will help speed up simple changes like
changing a color or adding CSS3 techniques gradients.

A WORD OF WARNING: It's very easy to overdo it here. Be careful and
remember less is more.

Helpful:
http://sachagreif.com/useful-sass-mixins/
http://thesassway.com/intermediate/leveraging-sass-mixins-for-cleaner-code
http://web-design-weekly.com/blog/2013/05/12/handy-sass-mixins/

******************************************************************/

/*********************
CLEARFIX
*********************/
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}



/* BOX SIZEING -
========================================================================== */

@mixin box-size {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


/* CSS3 PROPERTIES -
========================================================================== */

@mixin transition {
	-webkit-transition: all 0.3s ease-in-out;
	-moz-transition: all 0.3s ease-in-out;
	transition: all 0.3s ease-in-out;
}
@mixin fade {
	-moz-transition: all 1s ease-in;
	-moz-transition: all 0.3s ease-in-out;
	-webkit-transition: all 0.3s ease-in-out;
}



/*********************
TRANSITION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/

@mixin transition($transition...) {
  // defining prefixes so we can use them in mixins below
  $prefixes:      ("-webkit-", "" );
  @each $prefix in $prefixes {
    #{$prefix}transition: $transition;
  }
}

/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdo it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

/*********************
BOX SIZING
*********************/

/* @include box-sizing(border-box); */
/* NOTE: value of "padding-box" is only supported in Gecko. So
probably best not to use it. I mean, were you going to anyway? */
@mixin box-sizing($type: border-box) {
	-webkit-box-sizing: $type;
	-moz-box-sizing:    $type;
	-ms-box-sizing:     $type;
	box-sizing:         $type;
}

/*********************
BOX  SHADOW
*********************/

@mixin box-shadow( $horiz : .5em , $vert : .5em , $blur : 0px , $spread : 0px , $color : #000000 ){
  -webkit-box-shadow: $horiz $vert $blur $spread $color;
  -moz-box-shadow: $horiz $vert $blur $spread $color;
  box-shadow: $horiz $vert $blur $spread $color;
}

/*********************
MAZE
*********************/
$total-grid-columns: 12!default;
$gutter: 2% !default;
$fold: left !default;
$push: 0 !default;

$break-wide: 1140px;
$break-desktop: 1030px;
$break-tablet: 767px;
$break-mobile: 480px;

/* Calculate Min & Max Widths */

$gutter-unit:  $gutter / 1%;   /* Strip percentage from gutter */
$wrapper-gutter-percentage: ($break-wide / 100)  * $gutter-unit;   /* Work out 1% of $break-wide */

$max-width: $break-wide + $wrapper-gutter-percentage; /* Add gutter value to $max-width so that each row is equal to $break-wide */
$min-width: $break-mobile - 20px; /* Set min width with scroll bar */


/* MIXIN
========================================================================== */

@mixin grid($col-span, $fold:$fold, $push:$push, $grid-size:$total-grid-columns, $margin:$gutter) {

    @include transition;
        float:#{$fold};
        width: (100% / ($grid-size / $col-span)) - $margin ;

        @if $push <= 0 {
            margin-left: ($margin/2);
            margin-right: ($margin/2);
        }

        @if $push > 0 {
            margin-#{$fold}: (((100%  / $grid-size) * $push) ) + ( $margin / ( $grid-size / $push) );
        }

        &:hover {
            color: $white;
        }
}

@mixin break($media, $col-span, $grid-size:$total-grid-columns) {

	@if $media == desktop {

		@media only screen and (max-width:$break-tablet) {
			width: (((100%  / $grid-size) * $col-span) - $gutter ) ;
			margin: $gutter / 2;
		}
	}

	@else if $media == tablet {

		@media only screen and (max-width:$break-tablet) {
			width: (((100%  / $grid-size) * $col-span) - $gutter ) ;
			margin: $gutter / 2;
		}
	}

	@else if $media == mobile {

		@media only screen and (max-width:$break-mobile) {
			width: (((100%  / $grid-size) * $col-span) - $gutter ) ;
			margin: $gutter / 2;
		}
	}

}
